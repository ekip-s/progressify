services:
  progressify_front:
    build:
      context: .
      dockerfile: progressify_front_app/Dockerfile
    depends_on:
      - progressify_backend
    ports:
      - 5173:5173 
    networks:
      - frontend_backend_network
    restart: always  

  progressify_backend:
    build:
      context: .
      dockerfile: progressify_backend_app/master_data/Dockerfile
    depends_on:
      - progressify_database
      - kafka
    ports:
      - "8081:8081"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ENV=${ENV}
    networks:
      - frontend_backend_network
      - database_network
      - kafka-network
    restart: always  

  kafka_reader:  
    build:
      context: .
      dockerfile: progressify_backend_app/kafka_reader/Dockerfile
    depends_on:
      - progressify_database
      - kafka
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ENV=${ENV}
    networks:
      - database_network
      - kafka-network  
    restart: always    

  progressify_database:
    image: postgres:16.3
    container_name: progressify_database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "progressify_database"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - database_network
    restart: always  

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000  
    restart: always  
    networks:
      - kafka-network  

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    restart: always  
    networks:
      - kafka-network    

volumes:
  postgres_data:
  frontend_dist:
    driver: local

networks:
  kafka-network:    
    driver: bridge
  frontend_backend_network:
    driver: bridge
  database_network:
    driver: bridge